from unittest import TestCase

from shapely.geometry import Polygon, LineString, Point
from shapely.wkt import loads as wkt_loads

from shapely_ext.geometry.vector_2d import Vector2D
from shapely_ext.project import Projector
from test.constant import MATH_EPS
from test.util import is_geom_equal


class TestProject(TestCase):
    def test_small_polygon_project_onto_large_polygon(self):
        polygon1 = Polygon([(3.5, 1), (6, 1), (6, 3), (3.5, 3)])
        polygon2 = Polygon([(1, 1), (3, 1), (3, 4), (4, 4), (4, 5), (0, 5),
                            (0, 4), (1, 4), (1, 1)])
        line = Projector(polygon1, projecting_vector=Vector2D(-1, 0)).project_onto(polygon2)
        self.assertTrue(isinstance(line, LineString))
        self.assertEqual(line.length, polygon2.buffer(MATH_EPS).intersection(line).length)

    def test_large_polygon_project_onto_small_polygon(self):
        polygon1 = Polygon([(3.5, 1), (6, 1), (6, 3), (3.5, 3)])
        polygon2 = Polygon([(1, 1), (3, 1), (3, 4), (4, 4), (4, 5), (0, 5),
                            (0, 4), (1, 4), (1, 1)])
        line = Projector(polygon2, projecting_vector=Vector2D(1, 0)).project_onto(polygon1)
        self.assertTrue(isinstance(line, LineString))
        self.assertEqual(line.length, polygon1.buffer(MATH_EPS).intersection(line).length)

    def test_insert_coord(self):
        rect = Polygon([(0, 0), (10, 0), (10, 5), (0, 5)])
        coords = list(rect.exterior.coords)

        Projector._insert_into_coords(coords, (5, 0))
        self.assertEqual(6, len(coords))
        self.assertListEqual([(0.0, 0.0), (5.0, 0.0), (10.0, 0.0), (10.0, 5.0), (0.0, 5.0), (0.0, 0.0)], coords)

    def test_invalid_geometry_created_by_insert_coord(self):
        geom = wkt_loads("POLYGON ((1087.38777718021 587.6238258803972, 1066.990091678121 587.6238258803972, 1066.990091580104 587.6238258852126, 1066.990091483031 587.6238258996119, 1066.990091387836 587.6238259234569, 1066.990091295438 587.6238259565177, 1066.990091206724 587.623825998476, 1066.990091122551 587.6238260489276, 1066.990091043728 587.6238261073868, 1066.990090971014 587.6238261732905, 1066.990090905111 587.623826246004, 1066.990090846652 587.6238263248271, 1066.9900907962 587.6238264090005, 1066.990090754242 587.6238264977138, 1066.990090721181 587.6238265901126, 1066.990090697336 587.6238266853069, 1066.990090682936 587.6238267823801, 1066.990090678121 587.6238268803972, 1066.990090678121 615.1628893803972, 1066.990090682936 615.1628894784144, 1066.990090697336 615.1628895754876, 1066.990090721181 615.1628896706819, 1066.990090754242 615.1628897630807, 1066.9900907962 615.162889851794, 1066.990090846652 615.1628899359674, 1066.990090905111 615.1628900147905, 1066.990090971014 615.162890087504, 1066.990091043728 615.1628901534077, 1066.990091122551 615.1628902118669, 1066.990091206724 615.1628902623185, 1066.990091295438 615.1628903042767, 1066.990091387836 615.1628903373376, 1066.990091483031 615.1628903611826, 1066.990091580104 615.1628903755819, 1066.990091678121 615.1628903803972, 1087.38777718021 615.1628903803972, 1087.387777278227 615.1628903755819, 1087.3877773753 615.1628903611826, 1087.387777470495 615.1628903373376, 1087.387777562894 615.1628903042767, 1087.387777651607 615.1628902623185, 1087.38777773578 615.1628902118669, 1087.387777814603 615.1628901534077, 1087.387777887317 615.162890087504, 1087.387777953221 615.1628900147905, 1087.38777801168 615.1628899359674, 1087.387778062131 615.162889851794, 1087.38777810409 615.1628897630807, 1087.38777813715 615.1628896706819, 1087.387778160995 615.1628895754876, 1087.387778175395 615.1628894784144, 1087.38777818021 615.1628893803972, 1087.38777818021 587.6238268803972, 1087.387778175395 587.6238267823801, 1087.387778160995 587.6238266853069, 1087.38777813715 587.6238265901126, 1087.38777810409 587.6238264977138, 1087.387778062131 587.6238264090005, 1087.38777801168 587.6238263248271, 1087.387777953221 587.623826246004, 1087.387777887317 587.6238261732905, 1087.387777814603 587.6238261073868, 1087.38777773578 587.6238260489276, 1087.387777651607 587.623825998476, 1087.387777562894 587.6238259565177, 1087.387777470495 587.6238259234569, 1087.3877773753 587.6238258996119, 1087.387777278227 587.6238258852126, 1087.38777718021 587.6238258803972))")
        other_geom = wkt_loads("POLYGON ((1107.224685371296 596.8330699036721, 1097.188366375415 596.8330699036721, 1097.188366277398 596.8330699084875, 1097.188366180325 596.8330699228868, 1097.18836608513 596.8330699467318, 1097.188365992732 596.8330699797926, 1097.188365904018 596.8330700217509, 1097.188365819845 596.8330700722025, 1097.188365741022 596.8330701306617, 1097.188365668308 596.8330701965654, 1097.188365602405 596.8330702692789, 1097.188365543946 596.833070348102, 1097.188365493494 596.8330704322753, 1097.188365451536 596.8330705209887, 1097.188365418475 596.8330706133875, 1097.18836539463 596.8330707085818, 1097.18836538023 596.833070805655, 1097.188365375415 596.8330709036721, 1097.188365375415 602.9854146536721, 1097.18836538023 602.9854147516893, 1097.18836539463 602.9854148487625, 1097.188365418475 602.9854149439568, 1097.188365451536 602.9854150363556, 1097.188365493494 602.9854151250689, 1097.188365543946 602.9854152092423, 1097.188365602405 602.9854152880654, 1097.188365668308 602.9854153607789, 1097.188365741022 602.9854154266826, 1097.188365819845 602.9854154851417, 1097.188365904018 602.9854155355933, 1097.188365992732 602.9854155775516, 1097.18836608513 602.9854156106124, 1097.188366180325 602.9854156344575, 1097.188366277398 602.9854156488568, 1097.188366375415 602.9854156536721, 1107.224685371296 602.9854156536721, 1107.224685469313 602.9854156488568, 1107.224685566386 602.9854156344575, 1107.22468566158 602.9854156106124, 1107.224685753979 602.9854155775516, 1107.224685842692 602.9854155355933, 1107.224685926866 602.9854154851417, 1107.224686005689 602.9854154266826, 1107.224686078403 602.9854153607789, 1107.224686144306 602.9854152880654, 1107.224686202765 602.9854152092423, 1107.224686253217 602.9854151250689, 1107.224686295175 602.9854150363556, 1107.224686328236 602.9854149439568, 1107.224686352081 602.9854148487625, 1107.22468636648 602.9854147516893, 1107.224686371296 602.9854146536721, 1107.224686371296 596.8330709036721, 1107.22468636648 596.833070805655, 1107.224686352081 596.8330707085818, 1107.224686328236 596.8330706133875, 1107.224686295175 596.8330705209887, 1107.224686253217 596.8330704322753, 1107.224686202765 596.833070348102, 1107.224686144306 596.8330702692789, 1107.224686078403 596.8330701965654, 1107.224686005689 596.8330701306617, 1107.224685926866 596.8330700722025, 1107.224685842692 596.8330700217509, 1107.224685753979 596.8330699797926, 1107.22468566158 596.8330699467318, 1107.224685566386 596.8330699228868, 1107.224685469313 596.8330699084875, 1107.224685371296 596.8330699036721))")
        projector = Projector(geom, None)
        new_geom = projector._insert_other_geom_projections_into_geom(other_geom, Vector2D(-1, 0), geom)
        self.assertTrue(new_geom.is_valid)

    def test_insert_other_geom_projections_into_geom(self):
        polygon1 = Polygon([(3.5, 1), (6, 1), (6, 3), (3.5, 3)])
        polygon2 = Polygon([(1, 1), (3, 1), (3, 4), (4, 4), (4, 5), (0, 5),
                            (0, 4), (1, 4), (1, 1)])
        projector = Projector(polygon2, Vector2D(1, 0))
        new_polygon2 = projector._insert_other_geom_projections_into_geom(
            other_geom=polygon1, projecting_vector=Vector2D(-1, 0), geom=polygon2)
        self.assertTrue(len(polygon2.exterior.coords) < len(new_polygon2.exterior.coords))

    def test_construct_by_coords_according_to(self):
        projector = object.__new__(Projector)
        ref_polygon = Polygon([(0, 0), (1, 0), (1, 1)], [[(0.1, 0.1), (0.5, 0.1), (0.5, 0.5)]])
        new_polygon = projector._construct_by_coords_according_to(ref_polygon, [(0, 0), (1, 0), (1, 1), (0, 1)])
        expected_polygon = Polygon([(0, 0), (1, 0), (1, 1), (0, 1)], [[(0.1, 0.1), (0.5, 0.1), (0.5, 0.5)]])
        self.assertTrue(is_geom_equal(expected_polygon, new_polygon))
        self.assertEqual(list(ref_polygon.interiors), list(new_polygon.interiors))

        ref_lineString = LineString([(0, 0), (1, 0)])
        new_lineString = projector._construct_by_coords_according_to(ref_lineString, [(0, 0), (0, 1)])
        self.assertListEqual([(0, 0), (0, 1)], list(new_lineString.coords))

        ref_point = Point(0, 1)
        new_point = projector._construct_by_coords_according_to(ref_point, [(1, 0)])
        self.assertListEqual([(1, 0)], list(new_point.coords))
